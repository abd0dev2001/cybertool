from dataclasses import dataclass, field, asdict
from typing import List, Dict, Optional
import json
import datetime
import uuid
import os


@dataclass
class ScanFinding:
    id: str
    severity: str
    title: str
    description: str
    location: Optional[str] = None
    tool: Optional[str] = None
    extra: Dict = field(default_factory=dict)

    @staticmethod
    def create(severity: str, title: str, description: str, location: str = None, tool: str = None, extra: Dict = None):
        return ScanFinding(
            id=str(uuid.uuid4()),
            severity=severity,
            title=title,
            description=description,
            location=location,
            tool=tool,
            extra=extra or {}
        )


@dataclass
class ScanResult:
    id: str
    target: str
    scan_type: str
    started_at: str
    finished_at: Optional[str] = None
    findings: List[ScanFinding] = field(default_factory=list)
    metadata: Dict = field(default_factory=dict)

    def add_finding(self, finding: ScanFinding):
        self.findings.append(finding)

    def to_dict(self):
        return asdict(self)

    def to_json(self, pretty: bool = True) -> str:
        if pretty:
            return json.dumps(self.to_dict(), indent=2, default=str)
        return json.dumps(self.to_dict(), default=str)

    @staticmethod
    def new(target: str, scan_type: str, metadata: Dict = None):
        return ScanResult(
            id=str(uuid.uuid4()),
            target=target,
            scan_type=scan_type,
            started_at=datetime.datetime.utcnow().isoformat() + "Z",
            metadata=metadata or {}
        )

    def finish(self):
        self.finished_at = datetime.datetime.utcnow().isoformat() + "Z"

    def save(self, path: str):
        """
        Save JSON to path (path may be a directory or full filename).
        If directory provided, file name will be autogenerated.
        """
        os.makedirs(path, exist_ok=True) if os.path.isdir(path) else os.makedirs(os.path.dirname(path) or ".", exist_ok=True)

        if os.path.isdir(path):
            filename = f"scan_{self.scan_type}_{self.id}.json"
            fullpath = os.path.join(path, filename)
        else:
            fullpath = path

        with open(fullpath, "w", encoding="utf-8") as f:
            f.write(self.to_json(pretty=True))
        return fullpath

    @staticmethod
    def load(path: str):
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)

        findings = [ScanFinding(**ff) for ff in data.get("findings", [])]
        return ScanResult(
            id=data.get("id"),
            target=data.get("target"),
            scan_type=data.get("scan_type"),
            started_at=data.get("started_at"),
            finished_at=data.get("finished_at"),
            findings=findings,
            metadata=data.get("metadata", {})
        )
